const { readFileSync, existsSync, writeFileSync } = require('fs');
const { load, dump } = require('js-yaml');
const boxen = require('boxen');
const { generateChecksum } = require('./utils');

class Lock {
  #configHash;
  #configPath;
  #path;
  #files;
  #current;
  #providedData;

  constructor(path, configurationPath, configurationHash) {
    this.#path = path;
    this.configurationPath = configurationPath;
    this.configurationHash = configurationHash;
    this.#current = existsSync(path) ? load(readFileSync(path).toString(), 'utf8') : null;
  }

  set configurationPath(path) {
    this.#configPath = path;
  }

  set configurationHash(hash) {
    this.#configHash = hash;
  }

  get loadedAnswers() {
    this.answers = this.#current.variables;
    return this.answers;
  }

  get answers() {
    return this.#providedData;
  }

  set answers(list) {
    this.#providedData = list;
  }

  get data() {
    return {
      checksum: { file: this.#configPath, hash: this.#configHash },
      variables: this.#providedData,
      files: this.#files,
    };
  }

  get isFileUpdated() {
    return (
      !this.#current ||
      !this.#current.checksum ||
      !this.#current.checksum.file ||
      !this.#current.checksum.hash ||
      this.#current.checksum.file !== this.#configPath ||
      this.#current.checksum.hash !== this.#configHash
    );
  }

  get isAnswersChanged() {
    const isCurrentExist = !!(this.#current && this.#current.variables);
    return (
      !isCurrentExist ||
      (isCurrentExist &&
        !!this.#providedData &&
        generateChecksum(this.#current.variables) !== generateChecksum(this.#providedData))
    );
  }

  get cleanupList() {
    return !!this.#current && !!this.#current.files ? this.#current.files : [];
  }

  restore() {
    const content = dump(this.#current);
    writeFileSync(
      this.#path,
      `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# feasible lock file

${content}`,
    );
  }

  save(force) {
    if (force || this.isFileUpdated || this.isAnswersChanged) {
      const content = dump(this.data);
      writeFileSync(
        this.#path,
        `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# feasible lock file

${content}`,
      );
      if (!force) {
        console.log(boxen('Lock file updated!', { borderColor: 'magenta', padding: 1 }));
      }
      return true;
    }
    return false;
  }

  getVariableValue(name, initial, options) {
    const val =
      this.#current && this.#current.variables && name in this.#current.variables
        ? this.#current.variables[name]
        : initial;
    if (options && options.includes(val)) {
      return options.indexOf(val);
    }
    return val;
  }

  async registerFiles(files) {
    this.#files = files;
    this.save(true);
  }
}

module.exports = Lock;
